<?xml version="1.0" encoding="utf-8"?>

<!--
////////////////////////////////////////////////////////////////////////////////
//  بسم الله الرحمن الرحيم
//
//  حقوق التأليف والنشر ١٤٣٥ هجري، فارس بلحواس (Copyright 2014 Fares Belhaouas)  
//  كافة الحقوق محفوظة (All Rights Reserved)
//
//  NOTICE: Fares Belhaouas permits you to use, modify, and distribute this file
//  in accordance with the terms of the license agreement accompanying it.
//
////////////////////////////////////////////////////////////////////////////////
--><!---
/**
 *  <p>
 *  TODO: ASDOC
 *  </p>
 * 
 *  @author فارس بلحواس (Fares Belhaouas)
 *  @since  ١١ جمادى الأول ١٤٣٥ (March 11, 2014)
 */
-->

<containers:MoqawalatiHBox
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:containers="dz.alkhwarizmix.moqawalati.flex.view.containers.*"
	xmlns:controls="dz.alkhwarizmix.moqawalati.flex.view.controls.*"
	horizontalAlign="right"
	verticalAlign="middle"
	>
	
	<fx:Script>
	<![CDATA[
		import dz.alkhwarizmix.framework.flex.dtos.security.model.vo.UserVO;
		import dz.alkhwarizmix.framework.flex.logging.AlKhwarizmixLog;
		import dz.alkhwarizmix.framework.flex.logging.IAlKhwarizmixLogger;
		import dz.alkhwarizmix.moqawalati.flex.errors.MoqawalatiError;
		
		//--------------------------------------------------------------------------
		//
		//  Constants
		//
		//--------------------------------------------------------------------------
		
		//--------------------------------------------------------------------------
		//
		//  Logger
		//
		//--------------------------------------------------------------------------
		
		
		private static var LOG:IAlKhwarizmixLogger = null;
		
		override protected function get logger():IAlKhwarizmixLogger
		{
			if (!LOG)
				LOG = AlKhwarizmixLog.getLogger(LoginBox);
			return LOG;
		}
		
		//--------------------------------------------------------------------------
		//
		//  Variables
		//
		//--------------------------------------------------------------------------
		
		private var invalidateUserFlag:Boolean = true;
		
		private var btnEventToSend:String = LoginBoxEvent.CONNECT;
		
		//--------------------------------------------------------------------------
		//
		//  Properties
		//
		//--------------------------------------------------------------------------
		
		//----------------------------------
		//  connectedUser
		//----------------------------------
		
		private var _connectedUser:UserVO = null;
		public function get connectedUser():UserVO { return _connectedUser; }
		
		public function set connectedUser(value:UserVO):void
		{
			if (_connectedUser == value)
				return;
			_connectedUser = value;
			invalidateUser();
		}
		
		private function get isUserConnected():Boolean
		{
			return (connectedUser != null);
		}
		
		private function get isConnectedUserNew():Boolean
		{
			if (!isUserConnected)
				throw new MoqawalatiError("User should be connected!");
			return (!connectedUser.name);
		}
		
		//----------------------------------
		//  loggedUser
		//----------------------------------
		
		private var _loggedUser:UserVO = null;
		public function get loggedUser():UserVO { return _loggedUser; }
		
		public function set loggedUser(value:UserVO):void
		{
			if (_loggedUser == value)
				return;
			_loggedUser = value;
			invalidateUser();
		}
		
		private function get isUserLogged():Boolean
		{
			return (loggedUser != null);
		}
		
		//--------------------------------------------------------------------------
		//
		//  Overriden methods
		//
		//--------------------------------------------------------------------------
		
		/**
		 * @inheritDoc
		 */
		override public function validateDisplayList():void
		{
			super.validateDisplayList();
			
			validateUser();
		}
		
		/**
		 * @private
		 */
		private function validateUser():void
		{
			if (invalidateUserFlag)
			{
				hideComponent(labelUserName);
				showComponent(textUserId);
				hideComponent(textUserName);
				hideComponent(textPassword);
				hideComponent(btnCancel);
				
				if (isUserLogged)
					updateDisplayListToLogout();
				else if (!isUserConnected)
					updateDisplayListToConnect();
				else if (isConnectedUserNew)
					updateDisplayListToSuscribe();
				else 
					updateDisplayListToLogin();
				invalidateUserFlag = false;
			}
		}
		
		/**
		 * @private
		 */
		private function updateDisplayListToLogout():void
		{
			btnEventToSend = LoginBoxEvent.LOGOUT;
			btnSend.labelResKey = "LOGOUT";
			showComponent(labelUserName);
			labelUserName.text = loggedUser.name;
			
			hideComponent(textUserId);
		}
		
		/**
		 * @private
		 */
		private function updateDisplayListToConnect():void
		{
			btnEventToSend = LoginBoxEvent.CONNECT;
			btnSend.labelResKey = "CONNECT";
			textUserId.text = "";
		}
		
		/**
		 * @private
		 */
		private function updateDisplayListToSuscribe():void
		{
			btnEventToSend = LoginBoxEvent.SUBSCRIBE;
			btnSend.labelResKey = "SUBSCRIBE";
			showComponent(textUserName);
			showComponent(btnCancel);
			textUserName.text = "";	
		}
		
		/**
		 * @private
		 */
		private function updateDisplayListToLogin():void
		{
			btnEventToSend = LoginBoxEvent.LOGIN;
			btnSend.labelResKey = "LOGIN";
			showComponent(textPassword);
			showComponent(btnCancel);
			textPassword.text = "";
		}
		
		//--------------------------------------------------------------------------
		//
		//  Methods
		//
		//--------------------------------------------------------------------------
		
		private function invalidateUser():void
		{
			if (!invalidateUserFlag)
			{
				invalidateUserFlag = true;
				invalidateProperties();
				invalidateDisplayList();
			}
		}
		
		//--------------------------------------------------------------------------
		//
		//  Event handlers
		//
		//--------------------------------------------------------------------------
		
		/**
		 * @private
		 */
		private function btnSend_clickHandler(event:MouseEvent):void
		{
			sendEvent(btnEventToSend, LoginBoxEvent);
		}
		
		/**
		 * @private
		 */
		private function btnCancel_clickHandler(event:MouseEvent):void
		{
			sendEvent(LoginBoxEvent.LOGOUT, LoginBoxEvent);
		}
		
	]]>
	</fx:Script>
	
	<controls:MoqawalatiLabel id="labelUserName"/>
	<controls:MoqawalatiTextInput id="textUserId"
		promptResKey="USER_ID"/>
	<controls:MoqawalatiTextInput id="textUserName"
		promptResKey="USER_NAME"/>
	<controls:MoqawalatiTextInput id="textPassword"
		promptResKey="PASSWORD"
		displayAsPassword="true"/>
	<controls:MoqawalatiButton id="btnSend"
		click="btnSend_clickHandler(event)"/>
	<controls:MoqawalatiButton id="btnCancel"
		labelResKey="CANCEL"
		click="btnCancel_clickHandler(event)"/>	
</containers:MoqawalatiHBox>
